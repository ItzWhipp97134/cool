-- Example aimbot logic (for demonstration)
local aimbotEnabled = false
local aimbotSmoothness = 3
local aimbotConnection = nil
local aimbotKey = Enum.UserInputType.MouseButton2 -- Default MB2
local holdingKey = false
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

function GetClosestPlayer()
    local closest, closestDist = nil, math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
            if onScreen then
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2)).Magnitude
                if dist < closestDist then
                    closestDist = dist
                    closest = head
                end
            end
        end
    end
    return closest
end

function AimAt(target, smoothness)
    if not target then return end
    local camCF = Camera.CFrame
    local targetPos = target.Position
    local direction = (targetPos - camCF.Position).Unit
    local newCF = CFrame.new(camCF.Position, camCF.Position + direction)
    -- Lower smoothness = snappier, higher = slower
    local lerpAlpha = math.clamp(1 / math.max(smoothness, 0.01), 0.01, 1)
    Camera.CFrame = camCF:Lerp(newCF, lerpAlpha)
end

function EnableAimbot()
    if aimbotEnabled then return end
    aimbotEnabled = true
    print("Aimbot enabled!")
    aimbotConnection = RunService.RenderStepped:Connect(function()
        if holdingKey then
            local target = GetClosestPlayer()
            AimAt(target, aimbotSmoothness)
        end
    end)
end

function DisableAimbot()
    aimbotEnabled = false
    print("Aimbot disabled!")
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end
end

function SetAimbotSmoothness(val)
    aimbotSmoothness = val
    print("Smoothness set to", val)
end

function SetAimbotKeybind(inputType)
    aimbotKey = inputType
    print("Aimbot keybind set to", tostring(inputType))
end

-- Keybind detection
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == aimbotKey or input.KeyCode == aimbotKey then
        holdingKey = true
    end
end)
UserInputService.InputEnded:Connect(function(input, processed)
    if input.UserInputType == aimbotKey or input.KeyCode == aimbotKey then
        holdingKey = false
    end
end)

-- photon.lua: Rayfield-inspired, modern, beautiful, customizable UI library
-- Sidebar icons (Lucide or Roblox asset id), multiple themes, Rayfield-style API

-- Prevent duplicate windows
if _G.PhotonWindow then _G.PhotonWindow:Destroy() end
_G.PhotonWindow = nil

-- Lucide icon mapping (add more as needed)
local lucideIcons = {
    ["layout-dashboard"] = "rbxassetid://7733964641",
    ["target"] = "rbxassetid://7733964642",
    ["eye"] = "rbxassetid://7733964643",
    ["settings"] = "rbxassetid://7733964644",
    ["user"] = "rbxassetid://7733964645",
    ["shield"] = "rbxassetid://7733964646",
    ["code"] = "rbxassetid://7733964647",
    ["box"] = "rbxassetid://7733964648",
    ["star"] = "rbxassetid://7733964649",
    ["heart"] = "rbxassetid://7733964650"
}

-- THEMES
local themes = {
    Dark = {
        Main = Color3.fromRGB(28, 28, 34),
        TopBar = Color3.fromRGB(35, 35, 40),
        Sidebar = Color3.fromRGB(24, 24, 28),
        Section = Color3.fromRGB(38, 38, 48),
        Accent = Color3.fromRGB(60, 120, 200),
        Text = Color3.fromRGB(220, 220, 230)
    },
    Light = {
        Main = Color3.fromRGB(230, 230, 240),
        TopBar = Color3.fromRGB(210, 210, 220),
        Sidebar = Color3.fromRGB(200, 200, 210),
        Section = Color3.fromRGB(220, 220, 230),
        Accent = Color3.fromRGB(60, 120, 200),
        Text = Color3.fromRGB(40, 40, 50)
    },
    Red = {
        Main = Color3.fromRGB(34, 28, 28),
        TopBar = Color3.fromRGB(60, 30, 30),
        Sidebar = Color3.fromRGB(40, 20, 20),
        Section = Color3.fromRGB(60, 40, 40),
        Accent = Color3.fromRGB(200, 60, 60),
        Text = Color3.fromRGB(255, 220, 220)
    },
    Blue = {
        Main = Color3.fromRGB(28, 34, 40),
        TopBar = Color3.fromRGB(35, 40, 60),
        Sidebar = Color3.fromRGB(24, 28, 40),
        Section = Color3.fromRGB(38, 48, 60),
        Accent = Color3.fromRGB(60, 120, 200),
        Text = Color3.fromRGB(220, 230, 255)
    },
    Green = {
        Main = Color3.fromRGB(28, 34, 28),
        TopBar = Color3.fromRGB(35, 60, 35),
        Sidebar = Color3.fromRGB(24, 40, 24),
        Section = Color3.fromRGB(38, 60, 38),
        Accent = Color3.fromRGB(60, 200, 120),
        Text = Color3.fromRGB(220, 255, 220)
    },
    Purple = {
        Main = Color3.fromRGB(34, 28, 40),
        TopBar = Color3.fromRGB(60, 35, 60),
        Sidebar = Color3.fromRGB(40, 24, 40),
        Section = Color3.fromRGB(60, 38, 60),
        Accent = Color3.fromRGB(160, 60, 200),
        Text = Color3.fromRGB(240, 220, 255)
    }
}

-- Get icon asset (either Lucide name or Roblox asset id)
local function getIconAsset(icon)
    if not icon or icon == 0 then return nil end
    if type(icon) == "string" then
        return lucideIcons[icon] or lucideIcons["box"] -- fallback to box icon
    end
    return "rbxassetid://" .. tostring(icon)
end

local Photon = {}
Photon.__index = Photon
local Window = {}
Window.__index = Window
local Tab = {}
Tab.__index = Tab
local Section = {}
Section.__index = Section

function Photon:CreateWindow(options)
    if _G.PhotonWindow then _G.PhotonWindow:Destroy() end
    local self = setmetatable({}, Window)
    local theme = themes[options.Theme] or themes.Dark
    self.Theme = theme
    self.Name = options.Name or "PhotonUI"
    self.Icon = options.Icon or 0
    self.LoadingTitle = options.LoadingTitle
    self.LoadingSubtitle = options.LoadingSubtitle

    -- Create ScreenGui
    local gui = Instance.new("ScreenGui")
    gui.Name = self.Name
    gui.Parent = game.CoreGui
    gui.ResetOnSpawn = false

    -- Optional loading screen
    if self.LoadingTitle or self.LoadingSubtitle then
        local loadingFrame = Instance.new("Frame", gui)
        loadingFrame.Size = UDim2.new(1, 0, 1, 0)
        loadingFrame.BackgroundColor3 = theme.Main
        loadingFrame.ZIndex = 100
        local loadingTitle = Instance.new("TextLabel", loadingFrame)
        loadingTitle.Size = UDim2.new(1, 0, 0, 60)
        loadingTitle.Position = UDim2.new(0, 0, 0.5, -60)
        loadingTitle.BackgroundTransparency = 1
        loadingTitle.Text = self.LoadingTitle or ""
        loadingTitle.Font = Enum.Font.GothamBold
        loadingTitle.TextSize = 32
        loadingTitle.TextColor3 = theme.Accent
        loadingTitle.TextXAlignment = Enum.TextXAlignment.Center
        loadingTitle.TextYAlignment = Enum.TextYAlignment.Center
        local loadingSubtitle = Instance.new("TextLabel", loadingFrame)
        loadingSubtitle.Size = UDim2.new(1, 0, 0, 40)
        loadingSubtitle.Position = UDim2.new(0, 0, 0.5, 10)
        loadingSubtitle.BackgroundTransparency = 1
        loadingSubtitle.Text = self.LoadingSubtitle or ""
        loadingSubtitle.Font = Enum.Font.Gotham
        loadingSubtitle.TextSize = 22
        loadingSubtitle.TextColor3 = theme.Accent
        loadingSubtitle.TextXAlignment = Enum.TextXAlignment.Center
        loadingSubtitle.TextYAlignment = Enum.TextYAlignment.Center
        wait(1)
        loadingFrame:Destroy()
    end

    -- Main window frame
    local main = Instance.new("Frame", gui)
    main.Size = UDim2.new(0, 900, 0, 540)
    main.Position = UDim2.new(0.5, -450, 0.5, -270)
    main.BackgroundColor3 = theme.Main
    main.BorderSizePixel = 0
    main.Active = true
    main.Draggable = true
    main.ZIndex = 2
    local mainCorner = Instance.new("UICorner", main)
    mainCorner.CornerRadius = UDim.new(0, 14)
    local shadow = Instance.new("ImageLabel", main)
    shadow.Image = "rbxassetid://1316045217"
    shadow.BackgroundTransparency = 1
    shadow.Size = UDim2.new(1, 60, 1, 60)
    shadow.Position = UDim2.new(0, -30, 0, -30)
    shadow.ImageTransparency = 0.7
    shadow.ZIndex = 0

    -- Top Bar
    local topBar = Instance.new("Frame", main)
    topBar.Size = UDim2.new(1, 0, 0, 48)
    topBar.BackgroundColor3 = theme.TopBar
    topBar.BorderSizePixel = 0
    topBar.ZIndex = 3
    local topBarCorner = Instance.new("UICorner", topBar)
    topBarCorner.CornerRadius = UDim.new(0, 14)
    -- Icon
    if self.Icon and self.Icon ~= 0 then
        local icon = Instance.new("ImageLabel", topBar)
        icon.Size = UDim2.new(0, 32, 0, 32)
        icon.Position = UDim2.new(0, 12, 0.5, -16)
        icon.BackgroundTransparency = 1
        icon.ZIndex = 4
        icon.Image = getIconAsset(self.Icon)
    end
    local title = Instance.new("TextLabel", topBar)
    title.Size = UDim2.new(1, 0, 1, 0)
    title.BackgroundTransparency = 1
    title.Text = self.Name
    title.Font = Enum.Font.GothamBold
    title.TextSize = 22
    title.TextColor3 = theme.Accent
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Position = UDim2.new(0, 56, 0, 0)
    title.ZIndex = 4
    -- Close button
    local close = Instance.new("TextButton", topBar)
    close.Size = UDim2.new(0, 40, 0, 40)
    close.Position = UDim2.new(1, -48, 0, 4)
    close.BackgroundColor3 = theme.Section
    close.Text = "âœ•"
    close.Font = Enum.Font.GothamBold
    close.TextSize = 18
    close.TextColor3 = theme.Accent
    close.ZIndex = 5
    local closeCorner = Instance.new("UICorner", close)
    closeCorner.CornerRadius = UDim.new(1, 0)
    close.MouseButton1Click:Connect(function()
        gui:Destroy()
    end)

    -- Sidebar
    local sidebar = Instance.new("Frame", main)
    sidebar.Size = UDim2.new(0, 160, 1, -48)
    sidebar.Position = UDim2.new(0, 0, 0, 48)
    sidebar.BackgroundColor3 = theme.Sidebar
    sidebar.BorderSizePixel = 0
    sidebar.ZIndex = 4
    local sidebarCorner = Instance.new("UICorner", sidebar)
    sidebarCorner.CornerRadius = UDim.new(0, 12)
    local sidebarLayout = Instance.new("UIListLayout", sidebar)
    sidebarLayout.FillDirection = Enum.FillDirection.Vertical
    sidebarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    sidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder
    sidebarLayout.Padding = UDim.new(0, 6)

    -- Main Content Area
    local content = Instance.new("Frame", main)
    content.Size = UDim2.new(1, -160, 1, -48)
    content.Position = UDim2.new(0, 160, 0, 48)
    content.BackgroundTransparency = 1
    content.ZIndex = 5

    -- Store references
    self.Gui = gui
    self.Main = main
    self.Sidebar = sidebar
    self.Content = content
    self.Tabs = {}
    self.CurrentTab = nil
    self.Theme = theme
    _G.PhotonWindow = self.Gui
    return self
end

function Window:CreateTab(options)
    local name = type(options) == "table" and options.Name or tostring(options)
    local icon = type(options) == "table" and options.Icon or nil
    local selfWindow = self
    local tab = setmetatable({}, Tab)
    tab.Name = name
    tab.Icon = icon
    tab.Sections = {}
    tab.Columns = {}
    tab.Theme = self.Theme

    -- Sidebar button
    local tabBtn = Instance.new("TextButton", self.Sidebar)
    tabBtn.Size = UDim2.new(1, -12, 0, 44)
    tabBtn.BackgroundColor3 = self.Theme.Section
    tabBtn.Text = ""
    tabBtn.ZIndex = 5
    local tabBtnCorner = Instance.new("UICorner", tabBtn)
    tabBtnCorner.CornerRadius = UDim.new(0, 10)
    -- Icon
    if icon and icon ~= 0 then
        local iconImg = Instance.new("ImageLabel", tabBtn)
        iconImg.Size = UDim2.new(0, 24, 0, 24)
        iconImg.Position = UDim2.new(0, 8, 0.5, -12)
        iconImg.BackgroundTransparency = 1
        iconImg.ZIndex = 6
        iconImg.Image = getIconAsset(icon)
    end
    local tabLabel = Instance.new("TextLabel", tabBtn)
    tabLabel.Size = UDim2.new(1, -40, 1, 0)
    tabLabel.Position = UDim2.new(0, 40, 0, 0)
    tabLabel.BackgroundTransparency = 1
    tabLabel.Text = name
    tabLabel.Font = Enum.Font.GothamBold
    tabLabel.TextSize = 17
    tabLabel.TextColor3 = self.Theme.Text
    tabLabel.TextXAlignment = Enum.TextXAlignment.Left
    tabLabel.ZIndex = 6

    -- Tab content frame
    local tabContent = Instance.new("Frame", self.Content)
    tabContent.Size = UDim2.new(1, 0, 1, 0)
    tabContent.Position = UDim2.new(0, 0, 0, 0)
    tabContent.BackgroundTransparency = 1
    tabContent.Visible = (#self.Tabs == 0)
    tabContent.ZIndex = 6
    tab.ContentFrame = tabContent

    -- Tab switching logic
    tabBtn.MouseButton1Click:Connect(function()
        for _, t in ipairs(self.Tabs) do
            t.Button.BackgroundColor3 = self.Theme.Section
            t.ContentFrame.Visible = false
        end
        tabBtn.BackgroundColor3 = self.Theme.Accent
        tabContent.Visible = true
        self.CurrentTab = tab
    end)
    tab.Button = tabBtn
    table.insert(self.Tabs, tab)
    if #self.Tabs == 1 then
        tabBtn.BackgroundColor3 = self.Theme.Accent
        tabContent.Visible = true
        self.CurrentTab = tab
    end
    return tab
end

function Tab:CreateSection(options)
    local name = type(options) == "table" and options.Name or tostring(options)
    local section = setmetatable({}, Section)
    section.Name = name
    section.Controls = {}
    section.Theme = self.Theme

    -- Each section is a column
    local col = Instance.new("Frame", self.ContentFrame)
    local colCount = #self.Columns
    col.Size = UDim2.new(0, 240, 1, 0)
    col.Position = UDim2.new(0, colCount * 250, 0, 0)
    col.BackgroundColor3 = self.Theme.Section
    col.BorderSizePixel = 0
    col.ZIndex = 7
    local colCorner = Instance.new("UICorner", col)
    colCorner.CornerRadius = UDim.new(0, 10)
    local colStroke = Instance.new("UIStroke", col)
    colStroke.Color = self.Theme.Accent
    colStroke.Thickness = 1

    -- Section Header
    local header = Instance.new("TextLabel", col)
    header.Size = UDim2.new(1, 0, 0, 28)
    header.Position = UDim2.new(0, 0, 0, 0)
    header.BackgroundTransparency = 1
    header.Text = name
    header.Font = Enum.Font.GothamBold
    header.TextSize = 16
    header.TextColor3 = self.Theme.Accent
    header.TextXAlignment = Enum.TextXAlignment.Left
    header.ZIndex = 8

    -- Layout for controls
    local controlLayout = Instance.new("UIListLayout", col)
    controlLayout.FillDirection = Enum.FillDirection.Vertical
    controlLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    controlLayout.SortOrder = Enum.SortOrder.LayoutOrder
    controlLayout.Padding = UDim.new(0, 10)
    controlLayout.Parent = col

    section.Frame = col
    section.Label = header
    section.Controls = {}
    table.insert(self.Columns, col)
    table.insert(self.Sections, section)
    return section
end

-- Add a toggle to a section (column)
function Section:CreateToggle(options)
    options.Theme = self.Theme
    return createToggle(self.Frame, options)
end

-- Add a slider to a section (column)
function Section:CreateSlider(options)
    options.Theme = self.Theme
    return createSlider(self.Frame, options)
end

function Section:CreateKeybind(options)
    local keybindFrame = Instance.new("Frame", self.Frame)
    keybindFrame.Size = UDim2.new(1, -16, 0, 36)
    keybindFrame.BackgroundTransparency = 1
    keybindFrame.ZIndex = 9

    local label = Instance.new("TextLabel", keybindFrame)
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Keybind"
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextColor3 = self.Theme.Accent
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10

    local keyBtn = Instance.new("TextButton", keybindFrame)
    keyBtn.Size = UDim2.new(0, 80, 0, 24)
    keyBtn.Position = UDim2.new(1, -90, 0.5, -12)
    keyBtn.BackgroundColor3 = self.Theme.Section
    keyBtn.Text = options.DefaultText or "MB2"
    keyBtn.Font = Enum.Font.Gotham
    keyBtn.TextSize = 14
    keyBtn.TextColor3 = self.Theme.Accent
    keyBtn.ZIndex = 11
    local keyBtnCorner = Instance.new("UICorner", keyBtn)
    keyBtnCorner.CornerRadius = UDim.new(1, 0)

    local waitingForKey = false
    keyBtn.MouseButton1Click:Connect(function()
        keyBtn.Text = "..."
        waitingForKey = true
    end)
    UserInputService.InputBegan:Connect(function(input, processed)
        if waitingForKey and not processed then
            waitingForKey = false
            local keyName = input.UserInputType.Name ~= "Keyboard" and input.UserInputType.Name or input.KeyCode.Name
            keyBtn.Text = keyName
            if options.Callback then options.Callback(input.UserInputType ~= Enum.UserInputType.Keyboard and input.UserInputType or input.KeyCode) end
        end
    end)
end

-- Add Color Picker to Section
function Section:CreateColorPicker(options)
    options.Theme = self.Theme
    return createColorPicker(self.Frame, options)
end

function Section:CreateDropdown(options)
    options.Theme = self.Theme
    return createDropdown(self.Frame, options)
end

-- Color Picker UI
local function createColorPicker(parent, options)
    local colorFrame = Instance.new("Frame", parent)
    colorFrame.Size = UDim2.new(1, -16, 0, 36)
    colorFrame.BackgroundTransparency = 1
    colorFrame.ZIndex = 9

    local label = Instance.new("TextLabel", colorFrame)
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Color"
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextColor3 = options.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10

    local colorBtn = Instance.new("TextButton", colorFrame)
    colorBtn.Size = UDim2.new(0, 36, 0, 24)
    colorBtn.Position = UDim2.new(1, -46, 0.5, -12)
    colorBtn.BackgroundColor3 = options.Default or Color3.fromRGB(0,255,0)
    colorBtn.Text = ""
    colorBtn.ZIndex = 11
    local colorBtnCorner = Instance.new("UICorner", colorBtn)
    colorBtnCorner.CornerRadius = UDim.new(1, 0)

    -- Color picker popup
    local popup = Instance.new("Frame", colorFrame)
    popup.Size = UDim2.new(0, 200, 0, 200)
    popup.Position = UDim2.new(1, 10, 0, 0)
    popup.BackgroundColor3 = options.Theme.Section
    popup.BorderSizePixel = 0
    popup.Visible = false
    popup.ZIndex = 20
    local popupCorner = Instance.new("UICorner", popup)
    popupCorner.CornerRadius = UDim.new(0, 8)

    -- Color wheel (simplified for demo)
    local wheel = Instance.new("ImageLabel", popup)
    wheel.Size = UDim2.new(0.8, 0, 0.8, 0)
    wheel.Position = UDim2.new(0.1, 0, 0.1, 0)
    wheel.BackgroundTransparency = 1
    wheel.Image = "rbxassetid://4155801252" -- color wheel image
    wheel.ZIndex = 21

    -- RGB inputs
    local rgbFrame = Instance.new("Frame", popup)
    rgbFrame.Size = UDim2.new(0.8, 0, 0.15, 0)
    rgbFrame.Position = UDim2.new(0.1, 0, 0.9, 0)
    rgbFrame.BackgroundTransparency = 1
    rgbFrame.ZIndex = 21

    local function createRGBInput(name, y)
        local input = Instance.new("TextBox", rgbFrame)
        input.Size = UDim2.new(0.3, 0, 1, 0)
        input.Position = UDim2.new(y * 0.33, 0, 0, 0)
        input.BackgroundColor3 = options.Theme.Main
        input.Text = "0"
        input.Font = Enum.Font.Gotham
        input.TextSize = 14
        input.TextColor3 = options.Theme.Text
        input.ZIndex = 22
        local inputCorner = Instance.new("UICorner", input)
        inputCorner.CornerRadius = UDim.new(0, 4)
        return input
    end

    local rInput = createRGBInput("R", 0)
    local gInput = createRGBInput("G", 1)
    local bInput = createRGBInput("B", 2)

    -- Show/hide popup
    colorBtn.MouseButton1Click:Connect(function()
        popup.Visible = not popup.Visible
    end)

    -- Update color from wheel (simplified)
    wheel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local pos = input.Position
            local relX = (pos.X - wheel.AbsolutePosition.X) / wheel.AbsoluteSize.X
            local relY = (pos.Y - wheel.AbsolutePosition.Y) / wheel.AbsoluteSize.Y
            -- Convert position to color (simplified)
            local color = Color3.fromHSV(relX, relY, 1)
            colorBtn.BackgroundColor3 = color
            if options.Callback then options.Callback(color) end
        end
    end)

    -- Update color from RGB inputs
    local function updateFromRGB()
        local r = tonumber(rInput.Text) or 0
        local g = tonumber(gInput.Text) or 0
        local b = tonumber(bInput.Text) or 0
        local color = Color3.fromRGB(r, g, b)
        colorBtn.BackgroundColor3 = color
        if options.Callback then options.Callback(color) end
    end

    rInput.FocusLost:Connect(updateFromRGB)
    gInput.FocusLost:Connect(updateFromRGB)
    bInput.FocusLost:Connect(updateFromRGB)

    return colorFrame
end

-- Enhanced Toggle
local function createToggle(parent, options)
    local toggleFrame = Instance.new("Frame", parent)
    toggleFrame.Size = UDim2.new(1, -16, 0, 32)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.ZIndex = 9

    local label = Instance.new("TextLabel", toggleFrame)
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Toggle"
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextColor3 = options.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10

    local button = Instance.new("TextButton", toggleFrame)
    button.Size = UDim2.new(0, 44, 0, 24)
    button.Position = UDim2.new(1, -54, 0.5, -12)
    button.BackgroundColor3 = options.CurrentValue and options.Theme.Accent or options.Theme.Section
    button.Text = ""
    button.AutoButtonColor = false
    button.ZIndex = 11
    local buttonCorner = Instance.new("UICorner", button)
    buttonCorner.CornerRadius = UDim.new(1, 0)

    local circle = Instance.new("Frame", button)
    circle.Size = UDim2.new(0, 16, 0, 16)
    circle.Position = options.CurrentValue and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
    circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    circle.ZIndex = 12
    local circleCorner = Instance.new("UICorner", circle)
    circleCorner.CornerRadius = UDim.new(1, 0)

    -- Smooth animation
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local state = options.CurrentValue or false

    button.MouseButton1Click:Connect(function()
        state = not state
        local targetPos = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        local targetColor = state and options.Theme.Accent or options.Theme.Section
        
        local tween1 = game:GetService("TweenService"):Create(circle, tweenInfo, {Position = targetPos})
        local tween2 = game:GetService("TweenService"):Create(button, tweenInfo, {BackgroundColor3 = targetColor})
        
        tween1:Play()
        tween2:Play()
        
        if options.Callback then options.Callback(state) end
    end)

    return toggleFrame
end

-- Enhanced Slider
local function createSlider(parent, options)
    local sliderFrame = Instance.new("Frame", parent)
    sliderFrame.Size = UDim2.new(1, -16, 0, 56)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.ZIndex = 9

    local label = Instance.new("TextLabel", sliderFrame)
    label.Size = UDim2.new(1, 0, 0, 18)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Slider"
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextColor3 = options.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10

    local valueLabel = Instance.new("TextLabel", sliderFrame)
    valueLabel.Size = UDim2.new(1, 0, 0, 18)
    valueLabel.Position = UDim2.new(0, 0, 0, 18)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(options.Default or options.Min or 0)
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextSize = 15
    valueLabel.TextColor3 = options.Theme.Text
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.ZIndex = 10

    local sliderBar = Instance.new("Frame", sliderFrame)
    sliderBar.Size = UDim2.new(1, 0, 0, 6)
    sliderBar.Position = UDim2.new(0, 0, 0, 36)
    sliderBar.BackgroundColor3 = options.Theme.Section
    sliderBar.ZIndex = 11
    local sliderBarCorner = Instance.new("UICorner", sliderBar)
    sliderBarCorner.CornerRadius = UDim.new(1, 0)

    local sliderFill = Instance.new("Frame", sliderBar)
    sliderFill.Size = UDim2.new((options.Default or options.Min or 0)/(options.Max or 10), 0, 1, 0)
    sliderFill.BackgroundColor3 = options.Theme.Accent
    sliderFill.ZIndex = 12
    local sliderFillCorner = Instance.new("UICorner", sliderFill)
    sliderFillCorner.CornerRadius = UDim.new(1, 0)

    local min = options.Min or 0
    local max = options.Max or 10
    local value = options.Default or min
    local dragging = false
    local window = sliderFrame.Parent.Parent.Parent.Parent -- main window frame

    local function updateSlider(input)
        local rel = (input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
        rel = math.clamp(rel, 0, 1)
        value = math.floor((min + (max-min)*rel)*100)/100
        sliderFill.Size = UDim2.new(rel, 0, 1, 0)
        valueLabel.Text = tostring(value)
        if options.Callback then options.Callback(value) end
    end

    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            if window then window.Draggable = false end
            updateSlider(input)
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input)
        end
    end)

    game:GetService("UserInputService").InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            if window then window.Draggable = true end
        end
    end)

    return sliderFrame
end

-- Enhanced Dropdown
local function createDropdown(parent, options)
    local dropdownFrame = Instance.new("Frame", parent)
    dropdownFrame.Size = UDim2.new(1, -16, 0, 36)
    dropdownFrame.BackgroundTransparency = 1
    dropdownFrame.ZIndex = 9

    local label = Instance.new("TextLabel", dropdownFrame)
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = options.Name or "Dropdown"
    label.Font = Enum.Font.Gotham
    label.TextSize = 15
    label.TextColor3 = options.Theme.Text
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10

    local dropBtn = Instance.new("TextButton", dropdownFrame)
    dropBtn.Size = UDim2.new(0, 80, 0, 24)
    dropBtn.Position = UDim2.new(1, -90, 0.5, -12)
    dropBtn.BackgroundColor3 = options.Theme.Section
    dropBtn.Text = options.Default or options.Options[1]
    dropBtn.Font = Enum.Font.Gotham
    dropBtn.TextSize = 14
    dropBtn.TextColor3 = options.Theme.Text
    dropBtn.ZIndex = 11
    local dropBtnCorner = Instance.new("UICorner", dropBtn)
    dropBtnCorner.CornerRadius = UDim.new(1, 0)

    local open = false
    local dropdownList
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    dropBtn.MouseButton1Click:Connect(function()
        if open then
            if dropdownList then
                local tween = game:GetService("TweenService"):Create(dropdownList, tweenInfo, {
                    Size = UDim2.new(0, 80, 0, 0),
                    BackgroundTransparency = 1
                })
                tween:Play()
                tween.Completed:Connect(function()
                    dropdownList:Destroy()
                end)
            end
            open = false
            return
        end

        open = true
        dropdownList = Instance.new("Frame", dropdownFrame)
        dropdownList.Size = UDim2.new(0, 80, 0, 0)
        dropdownList.Position = UDim2.new(1, -90, 1, 0)
        dropdownList.BackgroundColor3 = options.Theme.Section
        dropdownList.BackgroundTransparency = 1
        dropdownList.ZIndex = 12
        local listCorner = Instance.new("UICorner", dropdownList)
        listCorner.CornerRadius = UDim.new(0, 8)

        local listLayout = Instance.new("UIListLayout", dropdownList)
        listLayout.FillDirection = Enum.FillDirection.Vertical
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder
        listLayout.Padding = UDim.new(0, 2)

        for _, opt in ipairs(options.Options) do
            local optBtn = Instance.new("TextButton", dropdownList)
            optBtn.Size = UDim2.new(1, 0, 0, 22)
            optBtn.BackgroundColor3 = options.Theme.Section
            optBtn.Text = opt
            optBtn.Font = Enum.Font.Gotham
            optBtn.TextSize = 14
            optBtn.TextColor3 = options.Theme.Text
            optBtn.ZIndex = 13
            optBtn.BackgroundTransparency = 1
            local optCorner = Instance.new("UICorner", optBtn)
            optCorner.CornerRadius = UDim.new(0, 4)

            optBtn.MouseEnter:Connect(function()
                optBtn.BackgroundTransparency = 0.8
            end)

            optBtn.MouseLeave:Connect(function()
                optBtn.BackgroundTransparency = 1
            end)

            optBtn.MouseButton1Click:Connect(function()
                dropBtn.Text = opt
                if options.Callback then options.Callback(opt) end
                local tween = game:GetService("TweenService"):Create(dropdownList, tweenInfo, {
                    Size = UDim2.new(0, 80, 0, 0),
                    BackgroundTransparency = 1
                })
                tween:Play()
                tween.Completed:Connect(function()
                    dropdownList:Destroy()
                end)
                open = false
            end)
        end

        local targetSize = UDim2.new(0, 80, 0, #options.Options * 22 + (#options.Options-1) * 2)
        local tween = game:GetService("TweenService"):Create(dropdownList, tweenInfo, {
            Size = targetSize,
            BackgroundTransparency = 0
        })
        tween:Play()
    end)

    return dropdownFrame
end

-- Example usage for executor (Rayfield-style):
local Window = Photon:CreateWindow({
    Name = "Photon Example",
    Icon = "layout-dashboard", -- Lucide icon name or Roblox asset id
    Theme = "Purple"
})
local Tab = Window:CreateTab({ Name = "Aimbot", Icon = "target" })
local Section = Tab:CreateSection({ Name = "Main" })
Section:CreateToggle({ Name = "Aimbot Enabled", CurrentValue = false, Callback = function(state) print("Aimbot", state) end })
Section:CreateSlider({ Name = "Smoothness", Min = 1, Max = 10, Default = 3, Callback = function(val) print("Smoothness", val) end })
Section:CreateDropdown({ Name = "Target Part", Options = {"Head", "HumanoidRootPart", "Torso"}, Default = "Head", Callback = function(opt) print("Target", opt) end })
local VisualsTab = Window:CreateTab({ Name = "Visuals", Icon = "eye" })
local ESPSection = VisualsTab:CreateSection({ Name = "ESP" })
ESPSection:CreateToggle({ Name = "Box ESP", CurrentValue = false, Callback = function(state) print("ESP", state) end })
ESPSection:CreateColorPicker({ Name = "Box Color", Default = Color3.fromRGB(0,255,0), Callback = function(color) print("Color", color) end })
ESPSection:CreateSlider({ Name = "Box Thickness", Min = 1, Max = 5, Default = 2, Callback = function(val) print("Thickness", val) end })

return setmetatable({}, Photon) 

-- Photon-Style Custom UI Library (Rayfield Compatible API)

local BestHub = {}
BestHub.__index = BestHub

local UIS = game:GetService("UserInputService")
local TS = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local HttpService = game:GetService("HttpService")

-- Themes
local Themes = {
    ["Default"] = {
        Background = Color3.fromRGB(25, 25, 25),
        Navbar = Color3.fromRGB(20, 20, 20),
        Button = Color3.fromRGB(35, 35, 35),
        Text = Color3.fromRGB(255, 255, 255)
    },
    ["Light"] = {
        Background = Color3.fromRGB(240, 240, 240),
        Navbar = Color3.fromRGB(220, 220, 220),
        Button = Color3.fromRGB(200, 200, 200),
        Text = Color3.fromRGB(0, 0, 0)
    },
    ["Red"] = {
        Background = Color3.fromRGB(50, 0, 0),
        Navbar = Color3.fromRGB(40, 0, 0),
        Button = Color3.fromRGB(100, 0, 0),
        Text = Color3.fromRGB(255, 100, 100)
    }
}

-- Create the main screen GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "BestHubUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true
ScreenGui.Parent = CoreGui

-- Loading screen
local LoadingFrame = Instance.new("Frame")
LoadingFrame.Size = UDim2.new(0, 400, 0, 200)
LoadingFrame.Position = UDim2.new(0.5, -200, 0.5, -100)
LoadingFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
LoadingFrame.BorderSizePixel = 0
LoadingFrame.AnchorPoint = Vector2.new(0.5, 0.5)
LoadingFrame.Parent = ScreenGui

local LoadingTitle = Instance.new("TextLabel")
LoadingTitle.Size = UDim2.new(1, 0, 0.4, 0)
LoadingTitle.Position = UDim2.new(0, 0, 0, 0)
LoadingTitle.Text = "Loading..."
LoadingTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadingTitle.Font = Enum.Font.GothamBold
LoadingTitle.TextSize = 24
LoadingTitle.BackgroundTransparency = 1
LoadingTitle.Parent = LoadingFrame

local LoadingSubtitle = Instance.new("TextLabel")
LoadingSubtitle.Size = UDim2.new(1, 0, 0.4, 0)
LoadingSubtitle.Position = UDim2.new(0, 0, 0.4, 0)
LoadingSubtitle.Text = "Please wait"
LoadingSubtitle.TextColor3 = Color3.fromRGB(200, 200, 200)
LoadingSubtitle.Font = Enum.Font.Gotham
LoadingSubtitle.TextSize = 18
LoadingSubtitle.BackgroundTransparency = 1
LoadingSubtitle.Parent = LoadingFrame
-- Icon support from lucide.dev via image labels (expecting an imageId mapping)
local LucideIcons = {
    -- Add more icons here
}

local function CreateDraggable(frame)
    local dragToggle = nil
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

local function CreateNavButton(name, theme)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 100, 1, 0)
    btn.Text = name
    btn.BackgroundColor3 = theme.Button
    btn.TextColor3 = theme.Text
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 14
    btn.BorderSizePixel = 0
    return btn
end

local Tabs = {}
function BestHub:CreateWindow(settings)
    LoadingTitle.Text = settings.LoadingTitle or "BestHub UI"
    LoadingSubtitle.Text = settings.LoadingSubtitle or "Initializing..."

    task.wait(2)
    LoadingFrame:Destroy()

    local self = setmetatable({}, BestHub)
    self.Tabs = {}

    local theme = Themes[settings.Theme or "Default"] or Themes["Default"]

    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 750, 0, 450)
    MainFrame.Position = UDim2.new(0.5, -375, 0.5, -225)
    MainFrame.BackgroundColor3 = theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    MainFrame.Parent = ScreenGui
    CreateDraggable(MainFrame)

    local Header = Instance.new("Frame")
    Header.Size = UDim2.new(1, 0, 0, 40)
    Header.Position = UDim2.new(0, 0, 0, 0)
    Header.BackgroundColor3 = theme.Navbar
    Header.BorderSizePixel = 0
    Header.Parent = MainFrame

    if settings.Icon and LucideIcons[settings.Icon] then
        local Icon = Instance.new("ImageLabel")
        Icon.Size = UDim2.new(0, 24, 0, 24)
        Icon.Position = UDim2.new(0, 10, 0.5, -12)
        Icon.BackgroundTransparency = 1
        Icon.Image = LucideIcons[settings.Icon]
        Icon.Parent = Header
    end

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -40, 1, 0)
    Title.Position = UDim2.new(0, 40, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = settings.Name or "BestHub"
    Title.Font = Enum.Font.GothamBold
    Title.TextSize = 18
    Title.TextColor3 = theme.Text
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Header
    local Navbar = Instance.new("Frame")
    Navbar.Size = UDim2.new(1, 0, 0, 40)
    Navbar.Position = UDim2.new(0, 0, 1, -40)
    Navbar.BackgroundColor3 = theme.Navbar
    Navbar.BorderSizePixel = 0
    Navbar.Parent = MainFrame

    local ContentFrame = Instance.new("Frame")
    ContentFrame.Size = UDim2.new(1, 0, 1, -80)
    ContentFrame.Position = UDim2.new(0, 0, 0, 40)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.ClipsDescendants = true
    ContentFrame.Parent = MainFrame

    function self:CreateTab(tabSettings)
        local tab = {
            Name = tabSettings.Name or "New Tab",
            Elements = {},
            Frame = Instance.new("Frame")
        }

        tab.Frame.Size = UDim2.new(1, 0, 1, 0)
        tab.Frame.BackgroundTransparency = 1
        tab.Frame.Visible = false
        tab.Frame.Parent = ContentFrame

        local Layout = Instance.new("UIListLayout")
        Layout.SortOrder = Enum.SortOrder.LayoutOrder
        Layout.Padding = UDim.new(0, 6)
        Layout.Parent = tab.Frame

        local tabButton = CreateNavButton(tab.Name, theme)
        tabButton.Parent = Navbar

        tabButton.MouseButton1Click:Connect(function()
            for _, otherTab in ipairs(self.Tabs) do
                otherTab.Frame.Visible = false
            end
            tab.Frame.Visible = true
        end)

        function tab:AddToggle(toggleSettings)
            local toggle = Instance.new("TextButton")
            toggle.Size = UDim2.new(1, -20, 0, 30)
            toggle.BackgroundColor3 = theme.Button
            toggle.TextColor3 = theme.Text
            toggle.Font = Enum.Font.Gotham
            toggle.TextSize = 14
            toggle.TextXAlignment = Enum.TextXAlignment.Left
            toggle.Text = toggleSettings.Name .. " [" .. (toggleSettings.Default and "ON" or "OFF") .. "]"
            toggle.LayoutOrder = #tab.Frame:GetChildren()
            toggle.Parent = tab.Frame

            local state = toggleSettings.Default
            toggle.MouseButton1Click:Connect(function()
                state = not state
                toggle.Text = toggleSettings.Name .. " [" .. (state and "ON" or "OFF") .. "]"
                toggleSettings.Callback(state)
            end)
        end

        function tab:AddButton(buttonSettings)
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -20, 0, 30)
            button.BackgroundColor3 = theme.Button
            button.TextColor3 = theme.Text
            button.Font = Enum.Font.Gotham
            button.TextSize = 14
            button.Text = buttonSettings.Name
            button.LayoutOrder = #tab.Frame:GetChildren()
            button.Parent = tab.Frame

            button.MouseButton1Click:Connect(buttonSettings.Callback)
        end

        function tab:AddSlider(sliderSettings)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(1, -20, 0, 50)
            sliderFrame.BackgroundTransparency = 1
            sliderFrame.LayoutOrder = #tab.Frame:GetChildren()
            sliderFrame.Parent = tab.Frame

            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(1, 0, 0, 20)
            label.Text = sliderSettings.Name .. ": " .. tostring(sliderSettings.Default)
            label.Font = Enum.Font.Gotham
            label.TextSize = 14
            label.TextColor3 = theme.Text
            label.BackgroundTransparency = 1
            label.TextXAlignment = Enum.TextXAlignment.Left
            label.Parent = sliderFrame

            local slider = Instance.new("TextButton")
            slider.Size = UDim2.new(1, 0, 0, 20)
            slider.Position = UDim2.new(0, 0, 0, 25)
            slider.BackgroundColor3 = theme.Button
            slider.Text = ""
            slider.Parent = sliderFrame

            local fill = Instance.new("Frame")
            fill.Size = UDim2.new((sliderSettings.Default - sliderSettings.Min) / (sliderSettings.Max - sliderSettings.Min), 0, 1, 0)
            fill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
            fill.BorderSizePixel = 0
            fill.Parent = slider

            slider.MouseButton1Down:Connect(function()
                local conn
                conn = UIS.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement then
                        local scale = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
                        local value = math.floor(sliderSettings.Min + (sliderSettings.Max - sliderSettings.Min) * scale)
                        fill.Size = UDim2.new(scale, 0, 1, 0)
                        label.Text = sliderSettings.Name .. ": " .. tostring(value)
                        sliderSettings.Callback(value)
                    end
                end)
                UIS.InputEnded:Wait()
                conn:Disconnect()
            end)
        end

        -- More controls like ColorPicker, Dropdown, Keybinds will go in Part 4

        table.insert(self.Tabs, tab)
        return tab
    end

    return self
end
        function tab:AddDropdown(dropdownSettings)
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Size = UDim2.new(1, -20, 0, 30)
            dropdownFrame.BackgroundColor3 = theme.Button
            dropdownFrame.LayoutOrder = #tab.Frame:GetChildren()
            dropdownFrame.Parent = tab.Frame

            local dropdown = Instance.new("TextButton")
            dropdown.Size = UDim2.new(1, 0, 1, 0)
            dropdown.BackgroundTransparency = 1
            dropdown.Text = dropdownSettings.Name .. ": " .. dropdownSettings.Options[1]
            dropdown.TextColor3 = theme.Text
            dropdown.Font = Enum.Font.Gotham
            dropdown.TextSize = 14
            dropdown.TextXAlignment = Enum.TextXAlignment.Left
            dropdown.Parent = dropdownFrame

            local open = false
            local optionFrame

            dropdown.MouseButton1Click:Connect(function()
                if optionFrame then
                    optionFrame:Destroy()
                    optionFrame = nil
                    open = false
                    return
                end

                open = true
                optionFrame = Instance.new("Frame")
                optionFrame.Size = UDim2.new(1, 0, 0, #dropdownSettings.Options * 25)
                optionFrame.Position = UDim2.new(0, 0, 1, 0)
                optionFrame.BackgroundColor3 = theme.Button
                optionFrame.BorderSizePixel = 0
                optionFrame.Parent = dropdownFrame

                for _, option in ipairs(dropdownSettings.Options) do
                    local optBtn = Instance.new("TextButton")
                    optBtn.Size = UDim2.new(1, 0, 0, 25)
                    optBtn.Text = option
                    optBtn.BackgroundColor3 = theme.Button
                    optBtn.TextColor3 = theme.Text
                    optBtn.Font = Enum.Font.Gotham
                    optBtn.TextSize = 14
                    optBtn.Parent = optionFrame

                    optBtn.MouseButton1Click:Connect(function()
                        dropdown.Text = dropdownSettings.Name .. ": " .. option
                        dropdownSettings.Callback(option)
                        optionFrame:Destroy()
                        optionFrame = nil
                        open = false
                    end)
                end
            end)
        end

        function tab:AddColorPicker(colorSettings)
            local colorBtn = Instance.new("TextButton")
            colorBtn.Size = UDim2.new(1, -20, 0, 30)
            colorBtn.BackgroundColor3 = colorSettings.Default
            colorBtn.Text = colorSettings.Name
            colorBtn.TextColor3 = theme.Text
            colorBtn.Font = Enum.Font.Gotham
            colorBtn.TextSize = 14
            colorBtn.LayoutOrder = #tab.Frame:GetChildren()
            colorBtn.Parent = tab.Frame

            -- Simple color picker using RGB sliders (could be improved further)
            local r, g, b = colorSettings.Default.R * 255, colorSettings.Default.G * 255, colorSettings.Default.B * 255

            local function updateColor()
                local newColor = Color3.fromRGB(r, g, b)
                colorBtn.BackgroundColor3 = newColor
                colorSettings.Callback(newColor)
            end

            colorBtn.MouseButton1Click:Connect(function()
                local picker = Instance.new("Frame")
                picker.Size = UDim2.new(0, 200, 0, 100)
                picker.Position = UDim2.new(0, 0, 1, 5)
                picker.BackgroundColor3 = theme.Navbar
                picker.BorderSizePixel = 0
                picker.Parent = colorBtn

                local function createSlider(labelText, defaultVal, callback)
                    local slider = Instance.new("TextButton")
                    slider.Size = UDim2.new(1, -10, 0, 20)
                    slider.Position = UDim2.new(0, 5, 0, #picker:GetChildren() * 20)
                    slider.BackgroundColor3 = theme.Button
                    slider.Text = labelText .. ": " .. defaultVal
                    slider.TextColor3 = theme.Text
                    slider.Font = Enum.Font.Gotham
                    slider.TextSize = 12
                    slider.TextXAlignment = Enum.TextXAlignment.Left
                    slider.Parent = picker

                    slider.MouseButton1Down:Connect(function()
                        local conn
                        conn = UIS.InputChanged:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseMovement then
                                local scale = math.clamp((input.Position.X - slider.AbsolutePosition.X) / slider.AbsoluteSize.X, 0, 1)
                                local val = math.floor(scale * 255)
                                slider.Text = labelText .. ": " .. val
                                callback(val)
                                updateColor()
                            end
                        end)
                        UIS.InputEnded:Wait()
                        conn:Disconnect()
                    end)
                end

                createSlider("R", r, function(v) r = v end)
                createSlider("G", g, function(v) g = v end)
                createSlider("B", b, function(v) b = v end)
            end)
        end

        function tab:AddKeybind(bindSettings)
            local keybindBtn = Instance.new("TextButton")
            keybindBtn.Size = UDim2.new(1, -20, 0, 30)
            keybindBtn.BackgroundColor3 = theme.Button
            keybindBtn.TextColor3 = theme.Text
            keybindBtn.Font = Enum.Font.Gotham
            keybindBtn.TextSize = 14
            keybindBtn.Text = bindSettings.Name .. ": " .. tostring(bindSettings.Default and bindSettings.Default.Name or "None")
            keybindBtn.LayoutOrder = #tab.Frame:GetChildren()
            keybindBtn.Parent = tab.Frame

            local binding = false
            local boundKey = bindSettings.Default

            keybindBtn.MouseButton1Click:Connect(function()
                keybindBtn.Text = bindSettings.Name .. ": [Press Key]"
                binding = true
            end)

            UIS.InputBegan:Connect(function(input, gpe)
                if not gpe and binding then
                    binding = false
                    boundKey = input.KeyCode
                    keybindBtn.Text = bindSettings.Name .. ": " .. input.KeyCode.Name
                    bindSettings.Callback(input.KeyCode)
                elseif boundKey and input.KeyCode == boundKey then
                    bindSettings.Callback(input.KeyCode)
                end
            end)
        end
-- Make the MainFrame draggable
local dragging, dragInput, dragStart, startPos

Header.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = MainFrame.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

Header.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UIS.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		local delta = input.Position - dragStart
		MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)
MainFrame.BackgroundTransparency = 1
Header.BackgroundTransparency = 1
Navbar.BackgroundTransparency = 1

for _, desc in pairs(MainFrame:GetDescendants()) do
	if desc:IsA("TextLabel") or desc:IsA("TextButton") or desc:IsA("Frame") then
		desc.BackgroundTransparency = 1
		if desc:IsA("TextLabel") or desc:IsA("TextButton") then
			desc.TextTransparency = 1
		end
	end
end

-- Animate in
TS:Create(MainFrame, TweenInfo.new(0.4), {BackgroundTransparency = 0}):Play()
TS:Create(Header, TweenInfo.new(0.4), {BackgroundTransparency = 0}):Play()
TS:Create(Navbar, TweenInfo.new(0.4), {BackgroundTransparency = 0}):Play()

for _, desc in pairs(MainFrame:GetDescendants()) do
	if desc:IsA("TextLabel") or desc:IsA("TextButton") or desc:IsA("Frame") then
		TS:Create(desc, TweenInfo.new(0.4), {BackgroundTransparency = 0}):Play()
		if desc:IsA("TextLabel") or desc:IsA("TextButton") then
			TS:Create(desc, TweenInfo.new(0.4), {TextTransparency = 0}):Play()
		end
	end
end
btn.MouseEnter:Connect(function()
	TS:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = theme.Navbar}):Play()
end)

btn.MouseLeave:Connect(function()
	TS:Create(btn, TweenInfo.new(0.2), {BackgroundColor3 = theme.Button}):Play()
end)
